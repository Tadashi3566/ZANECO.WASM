@page "/sms/logs"
@attribute [MustHavePermission(FSHAction.View, FSHResource.SMS)]

<FshTitle Title="Message Logs" Description="Manage Message Logs" />

<EntityTable @ref="_table" TEntity="MessageLogDto" TId="int" TRequest="MessageLogUpdateRequest" Context="@Context">

    <EditFormContent>
        <MudItem xs="12" sm="4">
            <MudTextField Label="Sender" For="@(() => context.MessageFrom)" @bind-Value="context.MessageFrom" ReadOnly=true Variant="Variant.Outlined" />
        </MudItem>
        <MudItem xs="12" sm="4">
            <MudTextField Label="Receiver" For="@(() => context.MessageTo)" @bind-Value="context.MessageTo" ReadOnly=true Variant="Variant.Outlined" />
        </MudItem>
        <MudItem xs="12">
            <MudTextField Counter=160 Label="Message" For="@(() => context.MessageText)" @bind-Value="context.MessageText" Lines="5" ReadOnly=true Variant="Variant.Outlined" />
        </MudItem>
        <MudItem xs="12">
            <MudTextField Label="Description" For="@(() => context.Description)" @bind-Value="context.Description" Variant="Variant.Filled" />
        </MudItem>
        <MudItem xs="12">
            <MudTextField Label="Notes" For="@(() => context.Notes)" @bind-Value="context.Notes" Variant="Variant.Filled" />
        </MudItem>
    </EditFormContent>

</EntityTable>

@code {
    private RenderFragment<MessageLogDto> TemplateReceivedTime => context => __builder =>
    {
        <MudItem>
            <MudChip Icon="@Icons.Material.Filled.Watch" IconColor="Color.Tertiary" Label="true" Color="Color.Surface">@context.SendTime</MudChip>
        </MudItem>
    };

    private RenderFragment<MessageLogDto> TemplateSenderReceiver => context => __builder =>
    {
        <MudItem>
            <p>
                <MudChip Icon="@Icons.Material.Filled.Send" IconColor="Color.Tertiary" Label="true" Color="Color.Surface">@context.MessageFrom</MudChip>
                <MudChip Icon="@Icons.Material.Filled.Phone" IconColor="Color.Tertiary" Label="true" Color="Color.Surface" OnClick="@(() => Navigation.NavigateTo($"/sms/messages/{context.MessageFrom}"))">@context.MessageTo</MudChip>
            </p>
        </MudItem>
    };

    private RenderFragment<MessageLogDto> TemplateStatus => context => __builder =>
    {
        <MudItem Class="d-flex flex-column">
            @if (context.StatusCode.ToString().Contains("200") || context.StatusCode.ToString().Contains("201"))
            {
                <p><MudText Color="Color.Success" Typo="Typo.caption">@context.StatusCode @context.StatusText</MudText></p>
            }
            else
            {
                <p><MudText Color="Color.Error" Typo="Typo.caption">@context.StatusCode @context.StatusText</MudText></p>
            }
        </MudItem>
    };

    private RenderFragment<MessageLogDto> TemplateDescriptionNotes => context => __builder =>
    {
        <MudItem Class="d-flex flex-column">
            <MudText Typo="Typo.subtitle1">@context.Description</MudText>
            <MudText Typo="Typo.caption">@context.Notes</MudText>
        </MudItem>
    };
}