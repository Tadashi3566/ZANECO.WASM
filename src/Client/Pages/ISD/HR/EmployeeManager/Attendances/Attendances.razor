@page "/employee/attendance"
@page "/employee/attendance/{employeeId:guid}"
@page "/employee/attendance/{employeeId:guid}/{AttendanceDate:datetime}"

@using Syncfusion.Blazor.Inputs;

@attribute [MustHavePermission(FSHAction.View, FSHResource.Attendance)]

<MudBreadcrumbs Items="_breadcrumbs" />

<FshTitle Title="Attendance" Description="Employee Attendance Management" />

<EntityTable @bind-SearchString=_searchString @ref=_table SelectedItems=_selectedItems TEntity="AttendanceDto" TId="Guid" TRequest="AttendanceUpdateRequest" Context=Context>
    <AdvancedSearchContent>
        <MudGrid>
            @if (_canViewEmployees)
            {
                <MudItem Class="mt-1" xs="12" sm="6">
                    <AutocompleteEmployee @bind-Value="SearchEmployeeId" />
                </MudItem>
            }
            <MudItem Class="mt-2" xs="12" sm="6">
                <SfDateRangePicker TValue="DateTime"
                                   CssClass="e-bigger e-filled mt-1"
                                   @bind-StartDate=_startDate
                                   @bind-EndDate=_endDate
                                   Format="MMMM dd, yyyy"
                                   Placeholder="Date Range"
                                   FloatLabelType="FloatLabelType.Auto"
                                   ShowClearButton=true
                                   ShowTodayButton=true />
            </MudItem>
        </MudGrid>
    </AdvancedSearchContent>
    <ExtraActions>
        <MudDivider />
        <MudMenuItem OnClick="@(() => Navigation.NavigateTo($"/employee/timelogs/{SearchEmployeeId}"))"
                     OnTouch="@(() => Navigation.NavigateTo($"/employee/timelogs/{SearchEmployeeId}"))">
            Time Logs
        </MudMenuItem>
        <MudMenuItem OnClick="@(() => Calculate())"
                     OnTouch="@(() => Calculate())">
            Calculate
        </MudMenuItem>
    </ExtraActions>
    <EditFormContent>
        @*<MudItem xs="12">
            <AutocompleteEmployee For="@(() => context.EmployeeId)" @bind-Value="SearchEmployeeId" Disabled="!SearchEmployeeId.Equals(Guid.Empty)" />
        </MudItem>*@
        <MudItem xs="12" sm="6" md="3">
            <MudSelect Label="Type" For="@(() => context.DayType)" @bind-Value="context.DayType" Variant="Variant.Filled" >
                <MudSelectItem Value="@("DAY-OFF")" />
                <MudSelectItem Value="@("HOLIDAY")" />
                <MudSelectItem Value="@("ON-DUTY")" />
                <MudSelectItem Value="@("OTHER")" />
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <SfDatePicker @bind-Value="context.AttendanceDate"
                            TValue="DateTime"
                            CssClass="e-bigger e-filled mt-1"
                            Format="MMMM dd, yyyy"
                            FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto"
                            Placeholder="Attendance Date" />
        </MudItem>
        <MudDivider/>
        <MudItem xs="12" sm="6" md="3">
            <SfDateTimePicker @bind-Value="context.ScheduleTimeIn1"
                                TValue="DateTime"
                                CssClass="e-bigger e-filled mt-1"
                                Format="MMMM dd, yyyy HH:mm (ddd)"
                                FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto"
                                Placeholder="Schedule Time-In 1"
                                WeekNumber=true />
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <SfDateTimePicker @bind-Value="context.ScheduleTimeOut1"
                                TValue="DateTime"
                                CssClass="e-bigger e-filled mt-1"
                                Format="MMMM dd, yyyy HH:mm (ddd)"
                                FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto"
                                Placeholder="Schedule Time-Out 1"
                                WeekNumber=true />
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <SfDateTimePicker @bind-Value="context.ScheduleTimeIn2"
                                TValue="DateTime"
                                CssClass="e-bigger e-filled mt-1"
                                Format="MMMM dd, yyyy HH:mm (ddd)"
                                FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto"
                                Placeholder="Schedule Time-In 2"
                                WeekNumber=true />
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <SfDateTimePicker @bind-Value="context.ScheduleTimeOut2"
                                TValue="DateTime"
                                CssClass="e-bigger e-filled mt-1"
                                Format="MMMM dd, yyyy HH:mm (ddd)"
                                FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto"
                                Placeholder="Schedule Time-Out 2"
                                WeekNumber=true />
        </MudItem>
        <MudDivider/>
        <MudItem xs="12" sm="6" md="3">
            <SfDateTimePicker @bind-Value="context.ActualTimeIn1"
                                TValue="DateTime?"
                                CssClass="e-bigger e-filled mt-1"
                                Format="MMMM dd, yyyy HH:mm (ddd)"
                                FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto"
                                Placeholder="Actual Time-In 1"
                                ShowClearButton=true
                                WeekNumber=true />
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <SfDateTimePicker @bind-Value="context.ActualTimeOut1"
                                TValue="DateTime?"
                                CssClass="e-bigger e-filled mt-1"
                                Format="MMMM dd, yyyy HH:mm (ddd)"
                                FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto"
                                Placeholder="Actual Time-Out 1"
                                ShowClearButton=true
                                WeekNumber=true />
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <SfDateTimePicker @bind-Value="context.ActualTimeIn2"
                                TValue="DateTime?"
                                CssClass="e-bigger e-filled mt-1"
                                Format="MMMM dd, yyyy HH:mm (ddd)"
                                FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto"
                                Placeholder="Actual Time-In 2"
                                ShowClearButton=true
                                WeekNumber=true />
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <SfDateTimePicker @bind-Value="context.ActualTimeOut2"
                                TValue="DateTime?"
                                CssClass="e-bigger e-filled mt-1"
                                Format="MMMM dd, yyyy HH:mm (ddd)"
                                FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto"
                                Placeholder="Actual Time-Out 2"
                                ShowClearButton=true
                                WeekNumber=true />
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudSwitch T="bool" Color="Color.Tertiary" Class="mt-3" Label="With Overtime" For="@(() => context.IsOvertime)" @bind-Checked=" context.IsOvertime" />
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudNumericField Label="Late (minutes)" For="@(() => context.LateMinutes)" @bind-Value="context.LateMinutes" Format="N2" ReadOnly=true Variant="Variant.Outlined" />
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudNumericField Label="Undertime (minutes)" For="@(() => context.UnderTimeMinutes)" @bind-Value="context.UnderTimeMinutes" Format="N2" ReadOnly=true Variant="Variant.Outlined" />
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudNumericField Label="Total Hours" For="@(() => context.TotalHours)" @bind-Value="context.TotalHours" Format="N2" ReadOnly=true Variant="Variant.Outlined" />
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudNumericField Label="Paid Hours" For="@(() => context.PaidHours)" @bind-Value="context.PaidHours" Format="N2" Variant="Variant.Filled" />
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudSelect Label="Status" For="@(() => context.Status)" @bind-Value="context.Status">
                <MudSelectItem Value="@("FOR APPROVAL")" />
                <MudSelectItem Value="@("APPROVED")" />
                <MudSelectItem Value="@("DISAPPROVED")" />
            </MudSelect>
        </MudItem>

        <MudItem xs="12">
            <MudExpansionPanels MultiExpansion="true">
                <MudExpansionPanel Text="Other Information">
                    <MudItem xs="12">
                        <MudTextField Label="Description" For="@(() => context.Description)" @bind-Value="context.Description" Lines="1" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField Label="Notes" For="@(() => context.Notes)" @bind-Value="context.Notes" Lines="2" />
                    </MudItem>
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudItem>

    </EditFormContent>
</EntityTable>

@code
{
    private RenderFragment<AttendanceDto> TemplateDayType => context => __builder =>
    {
        <MudItem Class="d-flex flex-column">
            <MudText Typo="Typo.caption">
                @context.AttendanceDate.ToString("MMMM dd, yyyy (dddd)")
            </MudText>
            @if (!context.DayType.Equals("ON-DUTY"))
            {
                <MudText Color="Color.Secondary" Typo="Typo.button">
                    <MudHighlighter Text="@context.DayType" HighlightedText="@_searchString" />
                </MudText>
            }
            else
            {
                <MudText Typo="Typo.subtitle2">
                    <MudHighlighter Text="@context.DayType" HighlightedText="@_searchString" />
                </MudText>
            }
        </MudItem>
    };

    private RenderFragment<AttendanceDto> TemplateImageTimeIn1 => context => __builder =>
    {
        <MudStack Justify="Justify.Center" Row=true>
            @if (context.ImagePathIn1 is not null)
            {
                <MudAvatar Image="@(string.IsNullOrEmpty(@context.ImagePathIn1) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + @context.ImagePathIn1))" Square="true" Style="height: 50px; width: 50px;"> </MudAvatar>
            }
            <MudText Typo="Typo.caption">
                @if (context.ActualTimeIn1 is not null)
                {
                    @Convert.ToDateTime(context.ActualTimeIn1).ToString("MMM dd, yyyy hh:mm tt")
                    ;
                }
            </MudText>
        </MudStack>
    };

    private RenderFragment<AttendanceDto> TemplateImageTimeOut1 => context => __builder =>
    {
        <MudStack Justify="Justify.Center" Row=true>
            @if (context.ImagePathOut1 is not null)
            {
                <MudAvatar Image="@(string.IsNullOrEmpty(@context.ImagePathOut1) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + @context.ImagePathOut1))" Square="true" Style="height: 50px; width: 50px;"> </MudAvatar>
            }
            <MudText Typo="Typo.caption">
                @if (context.ActualTimeOut1 is not null)
                {
                    @Convert.ToDateTime(context.ActualTimeOut1).ToString("MMM dd, yyyy hh:mm tt");
                }
            </MudText>
        </MudStack>
    };

    private RenderFragment<AttendanceDto> TemplateImageTimeIn2 => context => __builder =>
    {
        <MudStack Justify="Justify.Center" Row=true>
            @if (context.ImagePathIn2 is not null)
            {
                <MudAvatar Image="@(string.IsNullOrEmpty(@context.ImagePathIn2) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + @context.ImagePathIn2))" Square="true" Style="height: 50px; width: 50px;"> </MudAvatar>
            }
            <MudText Typo="Typo.caption">
                @if (context.ActualTimeIn2 is not null)
                {
                    @Convert.ToDateTime(context.ActualTimeIn2).ToString("MMM dd, yyyy hh:mm tt");
                }
            </MudText>
        </MudStack>
    };

    private RenderFragment<AttendanceDto> TemplateImageTimeOut2 => context => __builder =>
    {
        <MudStack Justify="Justify.Center" Row=true>
            @if (context.ImagePathOut2 is not null)
            {
                <MudAvatar Image="@(string.IsNullOrEmpty(@context.ImagePathOut2) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + @context.ImagePathOut2))" Square="true" Style="height: 50px; width: 50px;"> </MudAvatar>
            }
            <MudText Typo="Typo.caption">
                @if (context.ActualTimeOut2 is not null)
                {
                    @Convert.ToDateTime(context.ActualTimeOut2).ToString("MMM dd, yyyy hh:mm tt");
                }
            </MudText>
        </MudStack>
    };

    private RenderFragment<AttendanceDto> TemplateMinutesLateUnder => context => __builder =>
    {
        <MudItem Class="d-flex flex-row">
            @if(context.LateMinutes>0)
            {
                <MudChip Color="Color.Error" Label=true>
                    @context.LateMinutes.ToString("N0")
                </MudChip>
            }

            @if (context.UnderTimeMinutes > 0)
            {
                <MudChip Color="Color.Error" Label=true>
                    @context.UnderTimeMinutes.ToString("N0")
                </MudChip>
            }
        </MudItem>
    };

    private RenderFragment<AttendanceDto> TemplateHoursTotalPaid => context => __builder =>
    {
        <MudItem Class="d-flex flex-row">
            @if (context.TotalHours > 0 && context.TotalHours < context.ScheduleHours)
            {
                <MudChip Color="Color.Warning" Label=true>
                    @context.TotalHours.ToString("N2")
                </MudChip>
            }
            else
            {
                <MudChip Color="Color.Default" Label=true>
                    @context.TotalHours.ToString("N2")
                </MudChip>
            }

            @if (context.PaidHours > context.ScheduleHours)
            {
                <MudChip Color="Color.Secondary" Label=true>
                    @context.PaidHours.ToString("N2")
                </MudChip>
            }
            else
            {
                <MudChip Color="Color.Default" Label=true>
                    @context.PaidHours.ToString("N2")
                </MudChip>
            }
            @if (context.IsOvertime)
            {
                <MudChip Color="Color.Tertiary" Size="Size.Small" Variant="Variant.Outlined">Overtime</MudChip>
            }
        </MudItem>
    };

    private RenderFragment<AttendanceDto> TemplateDescriptionNotes => context => __builder =>
    {
        <MudItem Class="d-flex flex-column">
            <MudText Typo="Typo.subtitle2">
                <MudHighlighter Text="@context.Description" HighlightedText="@_searchString" />
            </MudText>
            <MudText Typo="Typo.caption">
                <MudHighlighter Text="@context.Notes" HighlightedText="@_searchString" />
            </MudText>
        </MudItem>
    };
}