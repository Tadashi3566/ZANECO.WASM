@page "/employee/timelogs"
@page "/employee/timelogs/{employeeId:guid}"
@page "/employee/timelogs/{employeeId:guid}/{LogDate:datetime}"

@using Syncfusion.Blazor.Inputs;

@attribute [MustHavePermission(FSHAction.View, FSHResource.Attendance)]

<FshTitle Title="Time Logs" Description="Employee Time Log Management" />

<MudBreadcrumbs Items="@_breadcrumbs" />

<EntityTable @bind-SearchString=_searchString @ref=_table TEntity="TimeLogDto" TId="Guid" TRequest="TimeLogViewModel" Context=Context>
    <AdvancedSearchContent>
        <MudGrid>
            @if (_canViewEmployees)
            {
                <MudItem Class="mt-1" xs="12" sm="6">
                    <AutocompleteEmployee @bind-Value="SearchEmployeeId" />
                </MudItem>
            }
            <MudItem Class="mt-2" xs="12" sm="6">
                <SfDateRangePicker TValue="DateTime"
                                   CssClass="e-bigger e-filled mt-1"
                                   @bind-StartDate=_startDate
                                   @bind-EndDate=_endDate
                                   Format="MMMM dd, yyyy"
                                   Placeholder="Date Range"
                                   FloatLabelType="FloatLabelType.Auto"
                                   ShowClearButton=true
                                   ShowTodayButton=true
                                   OnChange="(() => _table!.ReloadDataAsync())" />
            </MudItem>
        </MudGrid>
    </AdvancedSearchContent>
    <EditFormContent>
        @*<MudItem xs="12">
            <AutocompleteEmployee For="@(() => context.EmployeeId)" @bind-Value="SearchEmployeeId" Disabled="!SearchEmployeeId.Equals(Guid.Empty)" />
        </MudItem>*@
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudSelect T="string" Label="Log Type" For="@(() => context.LogType)" @bind-Value="context.LogType" Variant="Variant.Filled">
                <MudSelectItem Value="@("TIMEIN1")"/>
                <MudSelectItem Value="@("TIMEOUT1")"/>
                <MudSelectItem Value="@("TIMEIN2")" />
                <MudSelectItem Value="@("TIMEOUT2")" />
            </MudSelect>
        </MudItem>
        @if (_canUpdateAttendance)
        {
            <MudItem Class="mt-1" xs="12" sm="6" md="4" lg="3">
                <SfDatePicker TValue="DateTime"
                          @bind-Value=context.LogDate
                          CssClass="e-bigger e-filled mt-1"
                          Format="MMMM dd, yyyy"
                          Placeholder="Date"
                          FloatLabelType="FloatLabelType.Auto"
                          ShowClearButton=true
                          ShowTodayButton=true />
            </MudItem>
            <MudItem Class="mt-1" xs="12" sm="6" md="4" lg="3">
                <SfDateTimePicker TValue="DateTime"
                              @bind-Value=context.LogDateTime
                              CssClass="e-bigger e-filled mt-1"
                              Format="MMMM dd, yyyy HH:mm"
                              Placeholder="Date and Time"
                              FloatLabelType="FloatLabelType.Auto"
                              ShowClearButton=true
                              ShowTodayButton=true />
            </MudItem>
        }
        <MudItem xs="12">
            <MudTextField Label="Description" For="@(() => context.Description)" @bind-Value="context.Description" Lines="1" />
        </MudItem>
        <MudItem xs="12">
            <MudTextField Label="Notes" For="@(() => context.Notes)" @bind-Value="context.Notes" Lines="2" />
        </MudItem>

        <MudItem xs="12" md="6">
            <MudItem>
                @if (!string.IsNullOrEmpty(context.ImageInBytes))
                {
                    <MudAvatar Image="@context.ImageInBytes" Square="true" Style="height: auto; width: auto; max-height: 100%"> </MudAvatar>
                }
                else
                {
                    <MudAvatar Image="@(string.IsNullOrEmpty(@context.ImagePath) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + @context.ImagePath))" Square="true" Style="height: auto; width: auto; max-height: 100%"> </MudAvatar>

                    @*<MudAvatar Square="true" Style="height: auto; width: auto; max-height: 100%">
                        <ChildContent>
                            <MudImage Src="@(string.IsNullOrEmpty(@context.ImagePath) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + @context.ImagePath))" />
                        </ChildContent>
                    </MudAvatar>*@
                }
            </MudItem>
            <MudItem>
                <div>
                    <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.CloudUpload" for="fileInput">
                        Take a Picture
                    </MudButton>
                    <MudItem>
                        <MudText Typo="Typo.caption">Select Camera and switch to Selfie mode.</MudText>
                    </MudItem>
                    @if (!Context.AddEditModal.IsCreate && !string.IsNullOrEmpty(context.ImagePath) && string.IsNullOrEmpty(context.ImageInBytes))
                    {
                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" Target="_blank"
                                   StartIcon="@Icons.Material.Filled.RemoveRedEye" Href="@(Config[ConfigNames.ApiBaseUrl] + @context.ImagePath)" Style="margin-left: 5px;">
                            View
                        </MudButton>
                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small"
                                   StartIcon="@Icons.Material.Filled.Delete" OnClick="SetDeleteCurrentImageFlag" Style="margin-left: 5px;">
                            Delete
                        </MudButton>
                    }
                    @if (!string.IsNullOrEmpty(context.ImageInBytes))
                    {
                        <MudButton HtmlTag="label" OnClick="ClearImageInBytes" Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" Target="_blank"
                                   StartIcon="@Icons.Material.Filled.Clear" Style="margin-left: 5px;">
                            Clear
                        </MudButton>
                    }
                </div>
                <InputFile id="fileInput" hidden OnChange="UploadImage" />
            </MudItem>
        </MudItem>
    </EditFormContent>
</EntityTable>

@code
{
    private RenderFragment<TimeLogDto> TemplateImage => context => __builder =>
    {
        <MudStack Class="ma-1" Justify="Justify.Center" Row=true>
            <MudAvatar Image="@(string.IsNullOrEmpty(@context.ImagePath) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + @context.ImagePath))" Square="true" Style="height: 50px; width: 50px;"> </MudAvatar>
        </MudStack>
    };

    private RenderFragment<TimeLogDto> TemplateDescriptionNotes => context => __builder =>
    {
        <MudItem Class="d-flex flex-column">
            <MudText Typo="Typo.subtitle2">
                <MudHighlighter Text="@context.Description" HighlightedText="@_searchString" />
            </MudText>
            <MudText Typo="Typo.caption">
                <MudHighlighter Text="@context.Notes" HighlightedText="@_searchString" />
            </MudText>
        </MudItem>
    };
}