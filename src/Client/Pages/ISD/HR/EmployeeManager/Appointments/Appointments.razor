@page "/employee/appointments"
@page "/employee/appointments/{employeeId:guid}"

@using Syncfusion.Blazor.Inputs;

@attribute [MustHavePermission(FSHAction.View, FSHResource.Appointment)]

<FshTitle Title="Appointments" Description="Employee Appointment Management" />

<MudBreadcrumbs Items="_breadcrumbs"></MudBreadcrumbs>

<EntityTable @bind-SearchString=_searchString @ref=_table TEntity="AppointmentDto" TId="int" TRequest="AppointmentViewModel" Context=Context>
    <AdvancedSearchContent>
        <MudGrid>
            @if (_canViewEmployees)
            {
                <MudItem Class="mt-1" xs="12" sm="6">
                    <AutocompleteEmployee @bind-Value="SearchEmployeeId" />
                </MudItem>
            }
            <MudItem Class="mt-2" xs="12" sm="6">
                <SfDateRangePicker TValue="DateTime"
                                    CssClass="e-bigger e-filled mt-1"
                                    @bind-StartDate=_startDate
                                    @bind-EndDate=_endDate
                                    Format="MMMM dd, yyyy"
                                    Placeholder="Date Range"
                                    FloatLabelType="FloatLabelType.Auto"
                                    ShowClearButton=true
                                    ShowTodayButton=true />
            </MudItem>
        </MudGrid>
    </AdvancedSearchContent>
    <ExtraActions>
        <MudMenuItem Icon="@Icons.Material.Filled.Send"
                     OnClick="@(() => ForAction(context.Id, "SEND"))"
                     OnTouch="@(() => ForAction(context.Id, "SEND"))"
                     Disabled=@(!context.EmployeeId.Equals(SearchEmployeeId) || !context.Status.Equals("CANCELLED"))>
            Send
        </MudMenuItem>
        <MudMenuItem Icon="@Icons.Material.Filled.Cancel"
                     OnClick="@(() => ForAction(context.Id, "CANCEL"))"
                     OnTouch="@(() => ForAction(context.Id, "CANCEL"))"
                     Disabled=@(!context.EmployeeId.Equals(SearchEmployeeId) || context.Status.Equals("CANCELLED"))>
            Cancel
        </MudMenuItem>
        <MudMenuItem Icon="@Icons.Material.Filled.Handshake"
                     OnClick="@(() => ForAction(context.Id, "RECOMMEND"))"
                     OnTouch="@(() => ForAction(context.Id, "RECOMMEND"))"
                     Disabled=@(!context.RecommendedBy.Equals(SearchEmployeeId) || !context.Status.Equals("PENDING"))>
            Recommend
        </MudMenuItem>
        <MudMenuItem Icon="@Icons.Material.Filled.ThumbUp"
                     OnClick="@(() => ForAction(context.Id, "APPROVE"))"
                     OnTouch="@(() => ForAction(context.Id, "APPROVE"))"
                     Disabled=@(!context.ApprovedBy.Equals(SearchEmployeeId) || !context.Status.Equals("RECOMMENDED"))>
            Approve
        </MudMenuItem>
        <MudMenuItem Icon="@Icons.Material.Filled.ThumbDown"
                     OnClick="@(() => ForAction(context.Id, "DISAPPROVE"))"
                     OnTouch="@(() => ForAction(context.Id, "DISAPPROVE"))"
                     Disabled=@(!context.ApprovedBy.Equals(SearchEmployeeId) || !context.Status.Equals("RECOMMENDED"))>
            Disapprove
        </MudMenuItem>
    </ExtraActions>
    <EditFormContent>
        @*<MudItem xs="12">
            <AutocompleteEmployee For="@(() => context.EmployeeId)" @bind-Value="SearchEmployeeId" Disabled="!SearchEmployeeId.Equals(Guid.Empty)" />
        </MudItem>*@

        <MudItem xs="12" sm="6">
            <AutocompleteAppointmentType For="@(() => context.AppointmentType)" @bind-Value=context.AppointmentType />
        </MudItem>
        <MudItem xs="12">
            <MudTextField Label="Appointment" For="@(() => context.Subject)" @bind-Value="context.Subject" Variant="Variant.Filled" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <SfDateTimePicker @bind-Value="context.StartDateTime"
                                TValue="DateTime"
                                CssClass="e-bigger e-filled mt-1"
                                Format="MMMM dd, yyyy HH:mm (dddd)"
                                Placeholder="Start Date/Time"
                                FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto"
                                WeekNumber=true />
        </MudItem>
        <MudItem xs="12" sm="6">
            <SfDateTimePicker TValue="DateTime" @bind-Value="context.EndDateTime"
                                TValue="DateTime"
                                CssClass="e-bigger e-filled mt-1"
                                Format="MMMM dd, yyyy HH:mm (dddd)"
                                Placeholder="Start Date/Time"
                                FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto"
                                WeekNumber=true />
        </MudItem>

        <MudItem xs="12">
            <MudTextField Label="Location" For="@(() => context.Location)" @bind-Value="context.Location" Variant="Variant.Filled" />
        </MudItem>

        <MudItem xs="6" sm="4" md="3" lg="2">
            <MudSwitch T="bool" Color="Color.Tertiary" Label="All Day" For="@(() => context.IsAllDay)" @bind-Checked="context.IsAllDay" />
        </MudItem>
        <MudItem xs="6" sm="4" md="3" lg="2">
            <MudSwitch T="bool" Color="Color.Tertiary" Label="Read-Only" For="@(() => context.IsReadonly)" @bind-Checked="context.IsReadonly" />
        </MudItem>
        <MudItem xs="6" sm="4" md="3" lg="2">
            <MudSwitch T="bool" Color="Color.Tertiary" Label="Block" For="@(() => context.IsBlock)" @bind-Checked="context.IsBlock" />
        </MudItem>

        <MudItem xs="12">
            <MudExpansionPanels MultiExpansion="true">
                <MudExpansionPanel Text="Approval">
                    <MudItem xs="12">
                        <AutocompleteEmployee Label="Recommender" For="@(() => context.RecommendedBy)" @bind-Value="context.RecommendedBy" HelperText=@string.Format("Recommended on {0:dddd MMMM dd, yyyy hh:mm:ss tt}", context.RecommendedOn) />
                    </MudItem>
                    <MudItem xs="12">
                        <AutocompleteEmployee Label="Approver" For="@(() => context.ApprovedBy)" @bind-Value="context.ApprovedBy" HelperText=@string.Format("Approved on {0:dddd MMMM dd, yyyy hh:mm:ss tt}", context.ApprovedOn) />
                    </MudItem>
                </MudExpansionPanel>
                <MudExpansionPanel Text="Other Information">
                    <MudItem xs="12">
                        <MudTextField Label="Description" For="@(() => context.Description)" @bind-Value="context.Description" Lines="1" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField Label="Notes" For="@(() => context.Notes)" @bind-Value="context.Notes" Lines="2" />
                    </MudItem>
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudItem>

        <MudItem xs="12">
            <MudItem>
                @if(!string.IsNullOrEmpty(context.ImageInBytes))
                {
                    <MudAvatar Image ="@context.ImageInBytes" Square="true" Style="height: auto; width: auto; max-height: 100%"> </MudAvatar>
                }
                else
                {
                    <MudAvatar Image="@(string.IsNullOrEmpty(@context.ImagePath) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + @context.ImagePath))" Square="true" Style="height: auto; width: auto; max-height: 100%"> </MudAvatar>
                }
            </MudItem>
            <MudItem>
                <div>
                    <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.CloudUpload" for="fileInput">
                        Upload
                    </MudButton>
                    @if(!Context.AddEditModal.IsCreate && !string.IsNullOrEmpty(context.ImagePath) && string.IsNullOrEmpty(context.ImageInBytes))
                    {
                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" Target="_blank"
                            StartIcon="@Icons.Material.Filled.RemoveRedEye" Href="@(Config[ConfigNames.ApiBaseUrl] + @context.ImagePath)" Style="margin-left: 5px;" >
                            View
                        </MudButton>

                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small"
                            StartIcon="@Icons.Material.Filled.Delete" OnClick="SetDeleteCurrentImageFlag" Style="margin-left: 5px;" >
                            Delete
                        </MudButton>
                    }
                    @if(!string.IsNullOrEmpty(context.ImageInBytes))
                    {
                        <MudButton HtmlTag="label"  OnClick="ClearImageInBytes" Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" Target="_blank"
                            StartIcon="@Icons.Material.Filled.Clear" Style="margin-left: 5px;" >
                            Clear
                        </MudButton>
                    }
                </div>
                <InputFile id="fileInput" hidden OnChange="UploadImage" />
            </MudItem>
        </MudItem>
    </EditFormContent>
</EntityTable>

@code{
    private RenderFragment<AppointmentDto> TemplateStartEnd => context => __builder =>
    {
        <MudItem Class="d-flex flex-column">
            <MudText Typo="Typo.caption">
                @context.StartDateTime.ToString("dddd MMMM dd, yyyy HH:mm")
            </MudText>
            <MudText Typo="Typo.subtitle2">
                @context.EndDateTime.ToString("dddd MMMM dd, yyyy HH:mm")
            </MudText>
        </MudItem>
    };

    private RenderFragment<AppointmentDto> TemplateSubjectLocation => context => __builder =>
    {
        <MudItem Class="d-flex flex-column">
            <MudText Typo="Typo.subtitle2">
                <MudHighlighter Text="@context.Subject" HighlightedText="@_searchString" />
            </MudText>
            <MudText Typo="Typo.caption">
                <MudHighlighter Text="@context.Location" HighlightedText="@_searchString" />
            </MudText>
        </MudItem>
    };

    private RenderFragment<AppointmentDto> TemplateRecommendApprove => context => __builder =>
    {
        <MudItem Class="d-flex flex-column">
            @if (context.RecommendedOn is not null)
            {
                <MudText Typo="Typo.caption">
                    @string.Format("{0:dddd MMMM dd, yyyy hh:mm:ss tt}", context.RecommendedOn)
                </MudText>
            }
            @if (context.ApprovedOn is not null)
            {
                <MudText Typo="Typo.subtitle2">
                    @string.Format("{0:dddd MMMM dd, yyyy hh:mm:ss tt}", context.ApprovedOn)
                </MudText>
            }
            
        </MudItem>
    };

    private RenderFragment<AppointmentDto> TemplateDescriptionNotes => context => __builder =>
    {
        <MudItem Class="d-flex flex-column">
            <MudText Typo="Typo.subtitle2">
                <MudHighlighter Text="@context.Description" HighlightedText="@_searchString" />
            </MudText>
            <MudText Typo="Typo.caption">
                <MudHighlighter Text="@context.Notes" HighlightedText="@_searchString" />
            </MudText>
        </MudItem>
    };
}