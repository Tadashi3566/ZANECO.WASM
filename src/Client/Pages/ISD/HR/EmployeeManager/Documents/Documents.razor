@page "/documents"

@attribute [MustHavePermission(FSHAction.View, FSHResource.Employees)]

<FshTitle Title="Documents" Description="Manage Documents" />

<EntityTable @bind-SearchString="_searchString" @ref="_table" TEntity="DocumentDto" TId="Guid" TRequest="DocumentViewModel" Context="@Context">
    <EditFormContent>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudDatePicker Label="Date" For="@(() => context.DocumentDate)" @bind-Date="context.DocumentDate" DateFormat="MMMM dd, yyyy" Variant="Variant.Filled" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudTextField Label="Reference" For="@(() => context.Reference)" @bind-Value="context.Reference" Variant="Variant.Filled" />
        </MudItem>
        <MudItem xs="12" sm="6" md="6" lg="3">
            <MudSwitch Class="mt-3" Label="Is Public" For="@(() => context.IsPublic)" @bind-Checked="context.IsPublic" Color="Color.Secondary" />
        </MudItem>
        <MudItem xs="12">
            <MudTextField Label="Name" For="@(() => context.Name)" @bind-Value="context.Name" Variant="Variant.Filled" />
        </MudItem>
        <MudItem xs="12">
            <MudTextField Label="Content" For="@(() => context.Content)" @bind-Value="context.Content" Variant="Variant.Filled" Lines="5" />
        </MudItem>
        <MudItem xs="12">
            <MudTextField Label="Description" For="@(() => context.Description)" @bind-Value="context.Description" Lines="1" />
        </MudItem>
        <MudItem xs="12">
            <MudTextField Label="Notes" For="@(() => context.Notes)" @bind-Value="context.Notes" Lines="2" />
        </MudItem>
        <MudItem xs="12">
            <MudItem>
                @if (context.FileInBytes is not null)
                {
                }
                else
                {
                    <MudAlert Class="mb-5">@(string.IsNullOrEmpty(@context.FilePath) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + @context.FilePath))</MudAlert>
                }
            </MudItem>
            <MudItem>
                <div>
                    <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.CloudUpload" for="fileInput">
                        Upload File
                    </MudButton>
                    @if (!Context.AddEditModal.IsCreate && !string.IsNullOrEmpty(context.FilePath) && context.FileInBytes is null)
                    {
                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small"
                               StartIcon="@Icons.Material.Filled.Delete" OnClick="SetDeleteCurrentFileFlag" Style="margin-left: 5px;">
                            Delete
                        </MudButton>
                    }
                    @if (context.FileInBytes is not null)
                    {
                        <MudButton HtmlTag="label" OnClick="ClearFileInBytes" Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" Target="_blank"
                               StartIcon="@Icons.Material.Filled.Clear" Style="margin-left: 5px;">
                            Clear
                        </MudButton>
                    }
                </div>
                <InputFile id="fileInput" hidden OnChange="UploadFiles" />
            </MudItem>
        </MudItem>
    </EditFormContent>

</EntityTable>

@code
{
    private RenderFragment<DocumentDto> TemplateDateReference => context => __builder =>
    {
        <MudItem Class="d-flex flex-column">
            <MudText Typo="Typo.subtitle2">
                @context.DocumentDate.ToString("MMMM dd, yyyy")
            </MudText>
            <MudText Typo="Typo.caption">
                <MudHighlighter Text="@context.Reference" HighlightedText="@_searchString" />
            </MudText>
            <MudSwitch Label="Is Public" Checked="@context.IsPublic" Color="Color.Secondary" ReadOnly />
        </MudItem>
    };

    private RenderFragment<DocumentDto> TemplateFileNameContent => context => __builder =>
    {
        <MudItem Class="d-flex flex-column">
            <MudText Typo="Typo.subtitle2">
                <MudHighlighter Text="@context.FileName" HighlightedText="@_searchString" />
            </MudText>
            <MudText Typo="Typo.caption">
                <MudHighlighter Text="@context.Content" HighlightedText="@_searchString" />
            </MudText>
        </MudItem>
    };

    private RenderFragment<DocumentDto> TemplateDescriptionNotes => context => __builder =>
    {
        <MudItem Class="d-flex flex-column">
            <MudText Typo="Typo.subtitle2">
                <MudHighlighter Text="@context.Description" HighlightedText="@_searchString" />
            </MudText>
            <MudText Typo="Typo.caption">
                <MudHighlighter Text="@context.Notes" HighlightedText="@_searchString" />
            </MudText>
        </MudItem>
    };
}