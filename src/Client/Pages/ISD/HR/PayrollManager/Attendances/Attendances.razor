@page "/payroll/attendance"
@page "/payroll/attendance/{EmployeeId:guid}/{PayrollId:guid}"

@attribute [MustHavePermission(FSHAction.View, FSHResource.Attendance)]

<FshTitle Title="Attendance" Description="Employee Attendance Management" />

<EntityTable @bind-SearchString="_searchString" @ref="_table" TEntity="AttendanceDto" TId="Guid" TRequest="AttendanceViewModel" Context="@Context">
    <AdvancedSearchContent>
        <MudItem Class="mt-3">
            <AutocompleteEmployee @bind-Value="SearchEmployeeId" />
        </MudItem>
    </AdvancedSearchContent>
    <EditFormContent>
        <MudItem xs="12">
            <AutocompleteEmployee For="@(() => context.EmployeeId)" @bind-Value="SearchEmployeeId" Disabled="!SearchEmployeeId.Equals(Guid.Empty)" />
        </MudItem>
        <MudItem xs="12" sm="6" md="6">
            <MudDatePicker Label="Attendance Date" For="@(() => context.AttendanceDate)" @bind-Date=" context.AttendanceDate" DateFormat="MMMM dd, yyyy" Variant="Variant.Filled" />
        </MudItem>
        <MudItem xs="6" sm="6" md="3">
            <MudTextField Label="Actual Time-In 1" For="@(() => context.ActualTimeIn1)" @bind-Value=" context.ActualTimeIn1" Variant="Variant.Filled" />
        </MudItem>
        <MudItem xs="6" sm="6" md="3">
            <MudTextField Label="Actual Time-Out 1" For="@(() => context.ActualTimeOut1)" @bind-Value="context.ActualTimeOut1" Variant="Variant.Filled" />
        </MudItem>
        <MudItem xs="6" sm="6" md="3">
            <MudTextField Label="Actual Time-In 2" For="@(() => context.ActualTimeIn2)" @bind-Value="context.ActualTimeIn2" Variant="Variant.Filled" />
        </MudItem>
        <MudItem xs="6" sm="6" md="3">
            <MudTextField Label="Actual Time-Out 2" For="@(() => context.ActualTimeOut2)" @bind-Value="context.ActualTimeOut2" Variant="Variant.Filled" />
        </MudItem>
        <MudItem xs="6" sm="6" md="3">
            <MudNumericField Label="Late (minutes)" For="@(() => context.LateMinutes)" @bind-Value="context.LateMinutes" Format="N0" ReadOnly=true Variant="Variant.Outlined" />
        </MudItem>
        <MudItem xs="6" sm="6" md="3">
            <MudNumericField Label="Undertime (minutes)" For="@(() => context.UnderTimeMinutes)" @bind-Value="context.UnderTimeMinutes" Format="N0" ReadOnly=true Variant="Variant.Outlined" />
        </MudItem>
        <MudItem xs="6" sm="6" md="3">
            <MudNumericField Label="Total Hours" For="@(() => context.TotalHours)" @bind-Value="context.TotalHours" Format="N2" ReadOnly=true Variant="Variant.Outlined" />
        </MudItem>
        <MudItem xs="6" sm="6" md="3">
            <MudNumericField Label="Paid Hours" For="@(() => context.PaidHours)" @bind-Value="context.PaidHours" Format="N2" Variant="Variant.Filled" />
        </MudItem>
        <MudItem xs="6" sm="6" md="3">
            <MudSelect Label="Status" For="@(() => context.Status)" @bind-Value="context.Status">
                <MudSelectItem Value="@("FOR APPROVAL")" />
                <MudSelectItem Value="@("APPROVED")" />
                <MudSelectItem Value="@("DISAPPROVED")" />
            </MudSelect>
        </MudItem>
        <MudItem xs="12">
            <MudTextField Label="Description" For="@(() => context.Description)" @bind-Value="context.Description" Lines="2" />
        </MudItem>
        <MudItem xs="12">
            <MudTextField Label="Notes" For="@(() => context.Notes)" @bind-Value="context.Notes" Lines="3" />
        </MudItem>

        <MudItem xs="12" md="6">
            <MudItem>
                @if (!string.IsNullOrEmpty(context.ImageBytes))
                {
                    <MudAvatar Image="@context.ImageBytes" Square="true" Style="height: auto; width: auto; max-height: 100%"> </MudAvatar>
                }
                else
                {
                    <MudAvatar Image="@(string.IsNullOrEmpty(@context.ImagePathIn1) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + @context.ImagePathIn1))" Square="true" Style="height: auto; width: auto; max-height: 100%"> </MudAvatar>
                }
            </MudItem>
            <MudItem>
                <div>
                    <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.CloudUpload" for="fileInput">
                        Upload Picture
                    </MudButton>
                    @if (!Context.AddEditModal.IsCreate && !string.IsNullOrEmpty(context.ImagePathIn1) && string.IsNullOrEmpty(context.ImageBytes))
                    {
                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" Target="_blank"
                                   StartIcon="@Icons.Material.Filled.RemoveRedEye" Link="@(Config[ConfigNames.ApiBaseUrl] + @context.ImagePathIn1)" Style="margin-left: 5px;">
                            View
                        </MudButton>

                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small"
                                   StartIcon="@Icons.Material.Filled.Delete" OnClick="SetDeleteCurrentImageFlag" Style="margin-left: 5px;">
                            Delete
                        </MudButton>
                    }
                    @if (!string.IsNullOrEmpty(context.ImageBytes))
                    {
                        <MudButton HtmlTag="label" OnClick="ClearImageInBytes" Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" Target="_blank"
                                   StartIcon="@Icons.Material.Filled.Clear" Style="margin-left: 5px;">
                            Clear
                        </MudButton>
                    }
                </div>
                <InputFile id="fileInput" hidden OnChange="UploadFiles" />
            </MudItem>
        </MudItem>
    </EditFormContent>
</EntityTable>

@code
{
    private RenderFragment<AttendanceDto> TemplateImageTimeIn1 => context => __builder =>
    {
        <MudStack Class="ma-1" Justify="Justify.Center" Row=true>
            <MudAvatar Image="@(string.IsNullOrEmpty(@context.ImagePathIn1) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + @context.ImagePathIn1))" Square="true" Style="height: 50px; width: 50px;"> </MudAvatar>
            <MudText Class="mt-2" Typo="Typo.h5">
                @context.ActualTimeIn1
            </MudText>
        </MudStack>
    };

    private RenderFragment<AttendanceDto> TemplateImageTimeOut1 => context => __builder =>
    {
        <MudStack Class="ma-1" Justify="Justify.Center" Row=true>
            <MudAvatar Image="@(string.IsNullOrEmpty(@context.ImagePathIn1) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + @context.ImagePathIn1))" Square="true" Style="height: 50px; width: 50px;"> </MudAvatar>
            <MudText Class="mt-2" Typo="Typo.h5">
                @context.ActualTimeOut1
            </MudText>
        </MudStack>
    };

    private RenderFragment<AttendanceDto> TemplateImageTimeIn2 => context => __builder =>
    {
        <MudStack Class="ma-1" Justify="Justify.Center" Row=true>
            <MudAvatar Image="@(string.IsNullOrEmpty(@context.ImagePathIn1) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + @context.ImagePathIn1))" Square="true" Style="height: 50px; width: 50px;"> </MudAvatar>
            <MudText Class="mt-2" Typo="Typo.h5">
                @context.ActualTimeIn2
            </MudText>
        </MudStack>
    };

    private RenderFragment<AttendanceDto> TemplateImageTimeOut2 => context => __builder =>
    {
        <MudStack Class="ma-1" Justify="Justify.Center" Row=true>
            <MudAvatar Image="@(string.IsNullOrEmpty(@context.ImagePathIn1) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + @context.ImagePathIn1))" Square="true" Style="height: 50px; width: 50px;"> </MudAvatar>
            <MudText Class="mt-2" Typo="Typo.h5">
                @context.ActualTimeOut2
            </MudText>
        </MudStack>
    };

    private RenderFragment<AttendanceDto> TemplateHoursTotalPaid => context => __builder =>
    {
        <MudItem Class="d-flex flex-column">
            <MudText Typo="Typo.body1">
                @context.TotalHours.ToString("N2")/@context.PaidHours.ToString("N2")
            </MudText>
        </MudItem>
    };

    private RenderFragment<AttendanceDto> TemplateDescriptionNotes => context => __builder =>
    {
        <MudItem Class="d-flex flex-column">
            <MudText Typo="Typo.subtitle2">
                <MudHighlighter Text="@context.Description" HighlightedText="@_searchString" />
            </MudText>
            <MudText Typo="Typo.caption">
                <MudHighlighter Text="@context.Notes" HighlightedText="@_searchString" />
            </MudText>
        </MudItem>
    };
}